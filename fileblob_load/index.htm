
<!DOCTYPE html>
<!--
Copyright 2011 Google Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

Author: Eric Bidelman (ericbidelman@chromium.org)
Author: Colt McAnlis (colton@google.com)
-->
<html>
<head>
<meta charset="utf-8" />
<meta http-equiv="X-UA-Compatible" content="chrome=1" />
<title>Native Client fileIO outside of the sandbox</title>
<link href='http://fonts.googleapis.com/css?family=Droid+Sans' rel='stylesheet' type='text/css'>

<style>
::selection {
  color: #eee;
  background: darkred;
}
html, body {
  height: 100%;
  overflow: hidden;
  margin: 0;
  padding: 0;
}
body {
  color: #222;
  font-family: 'Droid Sans', arial, sans-serif;
  -webkit-font-smoothing: antialiased;
  background: -moz-radial-gradient(farthest-side, rgba(0,0,0,0) 90%, rgba(0,0,0,0.2) 150%) #fff;
  background: -webkit-gradient(radial, center center, 500, center center, 1400, from(rgba(0,0,200,0)), to(rgba(0,0,200,0.6))) #fff;
  display: -webkit-box;
  -webkit-box-orient: vertical;
  -webkit-box-align: center;
  -webkit-box-pack: center;
  display: -moz-box;
  -moz-box-orient: vertical;
  -moz-box-align: center;
  -moz-box-pack: center;
  display: -o-box;
  -o-box-orient: vertical;
  -o-box-align: center;
  -o-box-pack: center;
  width: 100%; /* for FF */
}
body > section {
  position: relative;
}
a {
  color: #555;
}
a[data-disabled] {
  color: #ccc;
  text-decoration: line-through;
}
textarea {
  font-size: 100%;
  padding: 10px;
  border-radius: 5px;
  border: 1px solid #ccc;
  -webkit-box-shadow: 0 3px 7px #ccc inset;
  -moz-box-shadow: 0 3px 7px #ccc inset;
  -o-box-shadow: 0 3px 7px #ccc inset;
  -ms-box-shadow: 0 3px 7px #ccc inset;
  box-shadow: 0 3px 7px #ccc inset;
  outline: none;
  width: 500px;
  height: 100px;
  resize: none;
}
button {
  display: inline-block;
  background: -webkit-gradient(linear, 0% 40%, 0% 70%, from(#F9F9F9), to(#E3E3E3));
  background: -webkit-linear-gradient(#F9F9F9 40%, #E3E3E3 70%);
  background: -moz-linear-gradient(#F9F9F9 40%, #E3E3E3 70%);
  background: -ms-linear-gradient(#F9F9F9 40%, #E3E3E3 70%);
  background: -o-linear-gradient(#F9F9F9 40%, #E3E3E3 70%);
  background: linear-gradient(#F9F9F9 40%, #E3E3E3 70%);
  border: 1px solid #999;
  -webkit-border-radius: 3px;
  -ms-border-radius: 3px;
  -o-border-radius: 3px;
  border-radius: 3px;
  padding: 5px 8px;
  outline: none;
  white-space: nowrap;
  -webkit-user-select: none;
  -moz-user-select: none;
  user-select: none;
  cursor: pointer;
  text-shadow: 1px 1px #fff;
  font-weight: 700;
  font-size: 10pt;
}
button:hover {
  border-color: black;
}
button:active {
  background: -webkit-gradient(linear, 0% 40%, 0% 70%, from(#E3E3E3), to(#F9F9F9));
  background: -webkit-linear-gradient(#E3E3E3 40%, #F9F9F9 70%);
  background: -moz-linear-gradient(#E3E3E3 40%, #F9F9F9 70%);
  background: -ms-linear-gradient(#E3E3E3 40%, #F9F9F9 70%);
  background: -o-linear-gradient(#E3E3E3 40%, #F9F9F9 70%);
  background: linear-gradient(#E3E3E3 40%, #F9F9F9 70%);
}
ul {
  margin: 0;
  padding: 0;
}
li {
  list-style: none;
}
ul :last-child {
  margin-top: 10px;
}
details {
  position: absolute;
  top: 1em;
  left: 1em;
  margin: 1em 0;
  cursor: pointer;
  padding: 10px;
  background: #fff;
  border: 1px solid rgba(0,0,0,0.3);
  border-radius: 5px;
  max-width: 600px;
  font-size: 10pt;
  z-index: 100;
}
details > div {
  margin: 10px 0;
}
details blockquote {
  font-style: italic;
}
input[type="text"] {
  font-size: inherit;
  padding: 5px 7px;
  border-radius: 5px;
  border: 1px solid #ccc;
  outline: none;
  vertical-align: middle;
}
[contenteditable] {
  width: 500px;
  height: 200px;
  padding: 10px;
  border-radius: 5px;
  box-shadow: 0 3px 5px #ccc inset, 0 -1px 1px #ccc inset;
  margin-bottom: 1em;
  background: url('roughness_less.png') 50% 50%;
}
[contenteditable],
input[type="text"] {
  -webkit-transition: all 0.2s ease-in-out;
  -moz-transition: all 0.2s ease-in-out;
  -o-transition: all 0.2s ease-in-out;
  -ms-transition: all 0.2s ease-in-out;
  transition: all 0.2s ease-in-out;
  color: #aaa;
}
[contenteditable]:hover,
[contenteditable]:focus,
input[type="text"]:hover,
input[type="text"]:focus {
  outline: none;
  color: black;
}
aside:hover {
  opacity: 1;
}
aside {
  position: absolute;
  background: rgba(0,0,0,0.7);
  color: white;
  padding: 10px;
  border-radius: 5px;
  font-size: 10pt;

  width: 200px;
  display: inline-block;
  text-shadow: 1px 1px 1px black;
  top: 0;
  left: 0;
  opacity: 0;
  -webkit-transition: all 0.1s ease-in-out;
  -moz-transition: all 0.1s ease-in-out;
  -o-transition: all 0.1s ease-in-out;
  -ms-transition: all 0.1s ease-in-out;
  transition: all 0.1s ease-in-out;
}
aside:before {
  content: '';
  width: 15px;
  height: 15px;
  background: -webkit-linear-gradient(45deg, rgba(0, 0, 0, 0.7) 50%, transparent 50%);
  background: -moz-linear-gradient(45deg, rgba(0, 0, 0, 0.7) 50%, transparent 50%);
  -webkit-transform: rotateZ(45deg);
  -moz-transform: rotateZ(45deg);
  -ms-transform: rotateZ(45deg);
  -o-transform: rotateZ(45deg);
  transform: rotateZ(45deg);
  left: -8px;
  top: 45px;
  position: absolute;
}
aside a {
  color: inherit;
}
output:hover + aside {
  opacity: 1;
}
#download-help {
  top: 200px;
  left: 420px;
}
h1 {
  color: #aaa;
  font-weight: normal;
  text-align: center;
  margin: 0 0 1.5em 0;
  font-size: 175%;
  line-height: 1.5;
}
h1 a {
  color: inherit;
  text-decoration: none;
}
h1 a:hover {
  padding-bottom: 3px;
  border-bottom: 2px solid #eee;
}
</style>

<script type="text/javascript">
  
  // Check for the various File API support.
	if (window.File && window.FileReader && window.FileList && window.Blob) {
	  // Great success! All the File APIs are supported.
	} else {
	  alert('The File APIs are not fully supported in this browser.');
	}


      helloWorldModule = null;  // Global application object.
	  loadedFileName="";
	  fileData=null;
   
      // Indicate success when the NaCl module has loaded.
      function moduleDidLoad()
      {
          helloWorldModule = document.getElementById('hello_world');
          console.log('SUCCESS');
      }

      // Handle a message coming from the NaCl module.
      function handleMessage(message_event)
      {
		if(message_event.data[0] == ":" && message_event.data[1] == ":")
		{
          console.log(message_event.data);
		}
		else //this is a file we need to save back to disk
		{
			fileData = message_event.data;
			
			//swap our UI elements
			document.getElementById('saveFileUI').style.display="block";
			document.getElementById('loadFileUI').style.display="none";
			downloadFile();
		}
      }

	     function pageDidLoad()
      {
          if (helloWorldModule == null)
          {
              console.log('LOADING...');
          } else
          {
              // It's possible that the Native Client module onload event fired
              // before the page's onload event.  In this case, the status message
              // will reflect 'SUCCESS', but won't be displayed.  This call will
              // display the current message.
              console.log("");
          }
      }
  
  </script>
  
</head>
<body onload="pageDidLoad()">

<details>
  <summary>What is this?</summary>
  <div>
    <p>A demo of how to use Native Client to read/write files OUTSIDE of the Filesystem sandbox.<br><br>
	To read files from disk, this uses <code>window.webkitURL.createObjectURL</code><br>The file is passed into NaCl, read there, and passed back to HTML for you to save to disk.<br>
	To write the files to disk, this uses the HTML5 <code>download</code> attribute (<a href="http://html5-demos.appspot.com/static/a.download.html">more</a>).<br><br>
	NOTE this demo is HARD CODED to only accept files < 50k. 
  </p>
  </div>
</details>



<div id='loadFileUI' >
	<div id="listener">
	<h1>Load a file from disk and read it in NaCl:<br> <input type="file" id="files" name="file" /></h1><br>
    <script type="text/javascript">
        var listener = document.getElementById('listener')
        listener.addEventListener('load', moduleDidLoad, true);
        listener.addEventListener('message', handleMessage, true);
    </script>

	
	<embed name="nacl_module"
           id="blob_load"
           width=200  height=200
           src="blob.nmf"
           type="application/x-nacl" />

	<script>
	  function handleFileSelect(evt) {
		var files = evt.target.files; // FileList object

		var f = files[0];
		loadedFileName = f.name;
		var objectURL = window.webkitURL.createObjectURL(f);
		var naclObj = document.getElementById('blob_load');
		naclObj.postMessage(objectURL);
		
		
		
		
		
	  }
	  document.getElementById('files').addEventListener('change', handleFileSelect, false);
	</script>
	
	<output id="list"></output>

  </div>
</div>
  
  
  
  <!-- TO SAVE A FILE TO DISK -->
<div id='saveFileUI' style="display:none">

<section>
<div id="container">
	<h1><output></output> to save that file back to disk from NaCl.<br>

  </div>
  </h1>
</section>

<script>
var container = document.querySelector('#container');
var output = container.querySelector('output');

const MIME_TYPE = 'text/plain';


var cleanUp = function(a) {

	document.getElementById('saveFileUI').style.display="none";
	document.getElementById('loadFileUI').style.display="block";
	
  a.textContent = 'Downloaded';
  a.dataset.disabled = true;

  // Need a small delay for the revokeObjectURL to work properly.
  setTimeout(function() {
    window.URL.revokeObjectURL(a.href);
	
	//swap our UI elements
  }, 1500);
};

var downloadFile = function() {
  window.URL = window.webkitURL || window.URL;
  window.BlobBuilder = window.BlobBuilder || window.WebKitBlobBuilder ||
                       window.MozBlobBuilder;

  var prevLink = output.querySelector('a');
  if (prevLink) {
    window.URL.revokeObjectURL(prevLink.href);
    output.innerHTML = '';
  }

  var bb = new BlobBuilder();
  bb.append(fileData);

  var a = document.createElement('a');
  a.download = "NACL_" + loadedFileName;
  a.href = window.URL.createObjectURL(bb.getBlob(MIME_TYPE));
  a.textContent = 'Click Here';

  a.dataset.downloadurl = [MIME_TYPE, a.download, a.href].join(':');
  a.draggable = true; // Don't really need, but good practice.
  a.classList.add('dragout');

  output.appendChild(a);

  a.onclick = function(e) {
    if ('disabled' in this.dataset) {
      return false;
    }

    cleanUp(this);
  };
};
</script>
</div>
  
</div>

</body>
</html>